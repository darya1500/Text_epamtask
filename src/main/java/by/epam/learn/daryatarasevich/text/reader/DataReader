package by.epam.learn.daryatarasevich.text.reader;

import by.epam.learn.daryatarasevich.text.constant.MessageConstants;
import by.epam.learn.daryatarasevich.text.exception.IncorrectFilePathException;
import by.epam.learn.daryatarasevich.text.validation.FileValidator;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class DataReader {
   private static final Logger LOGGER = LogManager.getLogger(DataReader.class);

    public DataReader() {
    }

    /**
     * Read data from text file to String.
     *
     * @param filePath
     * @return result- all text as a string
     *
     * @author Darya Tarasevich
     */
    public String readFromTextFile(String filePath) throws IOException, IncorrectFilePathException {
        if (filePath == null) {
            LOGGER.error(MessageConstants.FILEPATH_IS_NULL);
            throw new NullPointerException(MessageConstants.FILEPATH_IS_NULL);
        }
        FileValidator fileValidator = new FileValidator();
        if (!fileValidator.doesFileExist(filePath)) {
           // LOGGER.error(MessageConstants.FILE_NAME_IS_INCORRECT);
            throw new IncorrectFilePathException(MessageConstants.FILE_NAME_IS_INCORRECT);
        }
        Stream<String> stream = Files.lines(Paths.get(filePath));
        List<String> listOfStringsAllResults = stream.collect(Collectors.toList());
        String result="";
        for (String string:listOfStringsAllResults){
            result=result +string+"\n";
        }
        return result;
    }
}
